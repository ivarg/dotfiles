"""""""""""
" Lua stuff
lua require('plugins')

augroup packer_user_config
  autocmd!
  autocmd BufWritePost plugins.lua source <afile> | PackerCompile
augroup end

lua <<EOF
-- Mappings.
-- See `:help vim.diagnostic.*` for documentation on any of the below functions
local opts = { noremap=true, silent=true }
vim.keymap.set('n', '<space>e', vim.diagnostic.open_float, opts)
vim.keymap.set('n', '[d', vim.diagnostic.goto_prev, opts)
vim.keymap.set('n', ']d', vim.diagnostic.goto_next, opts)
vim.keymap.set('n', '<space>q', vim.diagnostic.setloclist, opts)

-- Use an on_attach function to only map the following keys
-- after the language server attaches to the current buffer
local on_attach = function(client, bufnr)
  -- Enable completion triggered by <c-x><c-o>
  vim.api.nvim_buf_set_option(bufnr, 'omnifunc', 'v:lua.vim.lsp.omnifunc')

  -- Mappings.
  -- See `:help vim.lsp.*` for documentation on any of the below functions
  local bufopts = { noremap=true, silent=true, buffer=bufnr }
  vim.keymap.set('n', 'gD', vim.lsp.buf.declaration, bufopts)
  vim.keymap.set('n', 'gd', vim.lsp.buf.definition, bufopts)
  vim.keymap.set('n', 'K', vim.lsp.buf.hover, bufopts)
  vim.keymap.set('n', 'gi', vim.lsp.buf.implementation, bufopts)
  vim.keymap.set('n', '<C-k>', vim.lsp.buf.signature_help, bufopts)
  vim.keymap.set('n', '<space>wa', vim.lsp.buf.add_workspace_folder, bufopts)
  vim.keymap.set('n', '<space>wr', vim.lsp.buf.remove_workspace_folder, bufopts)
  vim.keymap.set('n', '<space>wl', function()
    print(vim.inspect(vim.lsp.buf.list_workspace_folders()))
  end, bufopts)
  vim.keymap.set('n', '<space>D', vim.lsp.buf.type_definition, bufopts)
  vim.keymap.set('n', '<space>rn', vim.lsp.buf.rename, bufopts)
  vim.keymap.set('n', '<space>ca', vim.lsp.buf.code_action, bufopts)
  vim.keymap.set('n', 'gr', vim.lsp.buf.references, bufopts)
  vim.keymap.set('n', '<space>f', function() vim.lsp.buf.format { async = true } end, bufopts)
end

local lsp_flags = {
  -- This is the default in Nvim 0.7+
  debounce_text_changes = 150,
}

require('mason').setup()

require('lspconfig')['pyright'].setup{
    on_attach = on_attach,
    flags = lsp_flags,
}
EOF

"""""""""""""""""
" Vimscript stuff
"
" This is the Neovim configuration of Ivar Gaitan <ivar.gaitan@gmail.com>
"call plug#begin()
" General bundles

"Plug 'dense-analysis/ale'


""Plug 'tpope/vim-sensible'
"Plug 'tpope/vim-repeat'
"Plug 'tpope/vim-surround'
"Plug 'tpope/vim-unimpaired'

"" JSON manipulation and pretty printing
"Plug 'tpope/vim-jdaddy'

"" Auto-close paretheses, and other closable chars
"Plug 'Townk/vim-autoclose'


""Plug 'tpope/vim-abolish.git'
"Plug 'kana/vim-textobj-user'
"Plug 'kana/vim-textobj-indent'
"Plug 'kana/vim-textobj-line'

"" Text selection
"Plug 'gcmt/wildfire.vim'
"Plug 'terryma/vim-expand-region'

"" General Programming
"Plug 'tpope/vim-fugitive'
"Plug 'junegunn/gv.vim'

"Plug 'mattn/webapi-vim'
"Plug 'mattn/gist-vim'

"Plug 'scrooloose/nerdcommenter'
"Plug 'tpope/vim-commentary'

"Plug 'godlygeek/tabular'

"Plug 'majutsushi/tagbar'

"Plug 'Olical/conjure'

"" Python
""Plug 'davidhalter/jedi-vim'
"Plug 'ervandew/supertab'

"" Go
"Plug 'fatih/vim-go'

"" Rust
"Plug 'rust-lang/rust.vim'

"" Julia
"Plug 'JuliaLang/julia-vim'

"" React stuff
"Plug 'pangloss/vim-javascript'
"Plug 'mxw/vim-jsx'

"" Livedown - markdown preview in browser
"Plug 'shime/vim-livedown'

"" API Blueprint
"Plug 'kylef/apiblueprint.vim'

"Plug 'stephpy/vim-yaml'

"call plug#end()


""""""""""""""""""""""""""""
"" Settings

colorscheme jellybeans

" Use system clipboard
set clipboard+=unnamedplus

set undofile                                   " So is persistent undo ...
set cursorline                                 " Highlight current line
set number                                     " Line numbers on
set winminheight=0                             " Windows can be 0 line high
set ignorecase                                 " Case insensitive search
set smartcase                                  " Case sensitive when uc present
set wildmode=list:longest,full                 " Command mode <Tab> completion, list matches, then longest common part, then all.
set whichwrap=b,s,h,l,<,>,[,]                  " Backspace and cursor keys wrap too
set scrolloff=3                                " Minimum lines to keep above and below cursor
set list                                       " Display whitespaces
set shiftwidth=4                               " Use indents of 4 spaces
set tabstop=4                                  " An indentation every four columns
set softtabstop=4                              " Let backspace delete indent
set expandtab                                  " Tabs are spaces, not tabs
set nojoinspaces                               " Prevents inserting two spaces after punctuation on a join (J)
set splitright                                 " Puts new vsplit windows to the right of the current
set splitbelow                                 " Puts new split windows to the bottom of the current
set hidden                                     " Allow buffer switching without saving

"set nofoldenable                               " Disable auto fold code
"set wrap                                       " Do not wrap long lines
"set shortmess+=filmnrxoOt                      " Abbrev. of messages (avoids 'hit enter')
"set virtualedit=onemore                        " Allow for cursor beyond last character
"set iskeyword-=.                               " '.' is an end of word designator
"set iskeyword-=#                               " '#' is an end of word designator
"set iskeyword-=-                               " '-' is an end of word designator
"set showmatch                                  " Show matching brackets/parenthesis
"set scrolljump=5                               " Lines to scroll when cursor leaves screen
"set guioptions-=T                              " Remove the toolbar
"set guioptions-=L                              " Remove scrollbars
"set guioptions-=r


"" Autocommands

" Write buffer when losing focus
autocmd BufLeave,FocusLost * silent! wall

" Strip trailing whitespace when writing buffer
" FileType matlab,markdown,c,cpp,java,go,javascript,python,rust,xml,yml
autocmd FileType matlab,markdown,c,cpp,java,go,javascript,javascipt.jsx,rust,xml,yml autocmd BufWritePre <buffer> call StripTrailingWhitespace()

" Always switch to the current file directory
autocmd BufEnter * if bufname("") !~ "^\[A-Za-z0-9\]*://" | lcd %:p:h | endif

" Instead of reverting the cursor to the last position in the buffer, we
" set it to the first line when editing a git commit message
autocmd FileType gitcommit au! BufEnter COMMIT_EDITMSG call setpos('.', [0, 1, 1, 0])

" Javascript and Java files use indentation of 2
autocmd FileType javascript,java,json setlocal shiftwidth=2 tabstop=2

" Restore cursor to file position in previous editing session
augroup resCur
    autocmd!
    autocmd BufWinEnter * call ResCur()
augroup END

augroup BWCCreateDir
    autocmd!
    autocmd BufWritePre * :call s:MkNonExDir(expand('<afile>'), +expand('<abuf>'))
augroup END


"" Mappings

" Leader
let mapleader = ','
let maplocalleader = '_'

" Escape
imap jj <esc><esc>
imap jk <esc><esc>

" Close current buffer without closing window
nnoremap <C-W><C-W> :bd<CR>

" Shortcut for opening file
map <leader>ew :e 

" Command buffer movements
cnoremap <C-H> <Left>
cnoremap <C-L> <Right>
cnoremap <C-A> <Home>
cnoremap <C-D> <Del>

" Input mode movements
inoremap <C-H> <Left>
inoremap <C-L> <Right>
inoremap <C-A> <Home>
inoremap <C-D> <Del>

" Shortcuts to quickly exit and reload .vimrc
nmap <leader>av :vsplit $MYVIMRC<cr>
nnoremap <leader>sv :source $MYVIMRC<cr>

" No shift when doing ex commands
nnoremap ; :

" Swedish keyboard convenience
nnoremap ö :
nnoremap - /

" Wrapped lines goes down/up to next row, rather than next line in file.
noremap j gj
noremap k gk

" Yank from the cursor to the end of the line, to be consistent with C and D.
nnoremap Y y$

" Toggle search element highlight
nmap <silent> <leader>/ :set invhlsearch<CR>

" Find merge conflict markers
map <leader>fc /\v^[<\|=>]{7}( .*\|$)<CR>

" Visual shifting (does not exit Visual mode)
vnoremap < <gv
vnoremap > >gv

" Allow using the repeat operator with a visual selection (!)
" http://stackoverflow.com/a/8064607/127816
vnoremap . :normal .<cr>

" Adjust viewports to the same size
map <Leader>= <C-w>=


"" Functions
"
" Create non-existing directory on save
function! s:MkNonExDir(file, buf)
    if empty(getbufvar(a:buf, '&buftype')) && a:file!~#'\v^\w+\:\/'
        let dir=fnamemodify(a:file, ':h')
        if !isdirectory(dir)
            call mkdir(dir, 'p')
        endif
    endif
endfunction

" Restore cursor to file position in previous editing session
function! ResCur()
    if line("'\"") <= line("$")
        normal! g`"
        return 1
    endif
endfunction

" Strip whitespace
function! StripTrailingWhitespace()
	" Preparation: save last search, and cursor position.
	let _s=@/
	let l = line(".")
	let c = col(".")
	" do the business:
	%s/\s\+$//e
	" clean up: restore previous search history, and cursor position
	let @/=_s
	call cursor(l, c)
endfunction


" matchit
let b:match_ignorecase = 1


" navigate location list 
noremap <C-n> :lne<CR>
noremap <C-m> :lp<CR>

set statusline+=%#warningmsg#
set statusline+=%*

" vim-autoclose
let g:autoclose_vim_commentmode = 1


"""""""""""""""""""""""""""""
"" Plugin stuff


" vim-airline
"
" Set configuration options for the statusline plugin vim-airline.
" Use the powerline theme and optionally enable powerline symbols.
" To use the symbols , , , , , , and .in the statusline
" segments add the following to your .vimrc.before.local file:
"   let g:airline_powerline_fonts=1
" If the previous symbols do not render for you then install a
" powerline enabled font.

" See `:echo g:airline_theme_map` for some more choices
" Default in terminal vim is 'dark'
let g:airline_powerline_fonts=1
let g:airline_theme = 'jellybeans'
"let g:airline_theme='dark'
" Short mode indicators
let g:airline_mode_map = {
  \ '__' : '-',
  \ 'n'  : 'N',
  \ 'i'  : 'I',
  \ 'R'  : 'R',
  \ 'c'  : 'C',
  \ 'v'  : 'V',
  \ 'V'  : 'V',
  \ '' : 'V',
  \ 's'  : 'S',
  \ 'S'  : 'S',
  \ '' : 'S',
  \ }
let g:airline#extensions#hunks#enabled = 0
let g:airline#extensions#bufferline#enabled = 0
let g:airline#extensions#whitespace#enabled = 0
" No tabs
"let g:airline#extensions#tabline#enabled = 1

let g:tmuxline_powerline_separators = 1



" NERDTree
"
map <C-e> :NERDTreeToggle<CR>
map <leader>e :NERDTreeFind<CR>
nmap <leader>nt :NERDTreeFind<CR>

" Keep NERDTree open after opening a file
let NERDShutUp=1
let NERDTreeShowBookmarks=1
let NERDTreeIgnore=['\.py[cd]$', '\~$', '\.swo$', '\.swp$', '^\.git$', '^\.hg$', '^\.svn$', '\.bzr$']
let NERDTreeChDirMode=0
let NERDTreeMouseMode=2
let NERDTreeShowHidden=1
let NERDTreeKeepTreeInNewTab=1

" This is to solve a nerd-fonts rendering problem
autocmd FileType nerdtree setlocal nolist


" Tabularize
"
nmap <Leader>a& :Tabularize /&<CR>
vmap <Leader>a& :Tabularize /&<CR>
nmap <Leader>a= :Tabularize /=<CR>
vmap <Leader>a= :Tabularize /=<CR>
nmap <Leader>a=> :Tabularize /=><CR>
vmap <Leader>a=> :Tabularize /=><CR>
nmap <Leader>a: :Tabularize /:<CR>
vmap <Leader>a: :Tabularize /:<CR>
nmap <Leader>a:: :Tabularize /:\zs<CR>
vmap <Leader>a:: :Tabularize /:\zs<CR>
nmap <Leader>a, :Tabularize /,<CR>
vmap <Leader>a, :Tabularize /,<CR>
nmap <Leader>a,, :Tabularize /,\zs<CR>
vmap <Leader>a,, :Tabularize /,\zs<CR>
nmap <Leader>a<Bar> :Tabularize /<Bar><CR>
vmap <Leader>a<Bar> :Tabularize /<Bar><CR>


" CtrlP
"
let g:ctrlp_max_depth = 5
let g:ctrlp_by_filename = 1
let g:ctrlp_working_path_mode = 'ra'
nnoremap <silent> <D-t> :CtrlP<CR>
nnoremap <silent> <D-r> :CtrlPMRU<CR>
let g:ctrlp_custom_ignore = {
	\ 'dir':  '\.git$\|\.hg$\|\.svn$',
	\ 'file': '\.exe$\|\.so$\|\.dll$\|\.pyc$' }

" CtrlP extensions
let g:ctrlp_extensions = ['funky']
"funky
nnoremap <Leader>fu :CtrlPFunky<Cr>



" Fugitive
nnoremap <silent> <leader>gs :Git status<CR>
nnoremap <silent> <leader>gd :Git diff<CR>
nnoremap <silent> <leader>gb :Git blame<CR>
" Mnemonic _i_nteractive
nnoremap <silent> <leader>gi :Git add -p %<CR>
nnoremap <silent> <leader>gg :GitGutterToggle<CR>


" Enable omni completion.
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType javascript.jsx setlocal omnifunc=javascriptcomplete#CompleteJS
"autocmd FileType python setlocal omnifunc=python3complete#Complete
autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
autocmd FileType ruby setlocal omnifunc=rubycomplete#Complete
autocmd FileType haskell setlocal omnifunc=necoghc#omnifunc

" Disable the neosnippet preview candidate window
" When enabled, there can be too much visual noise
" especially when splits are used.
set completeopt-=preview


" UndoTree
nnoremap <Leader>u :UndotreeToggle<CR>
" If undotree is opened, it is likely one wants to interact with it.
let g:undotree_SetFocusWhenToggle=1


" Wildfire
let g:wildfire_objects = {
	\ "*" : ["i'", 'i"', "i)", "i]", "i}", "ip"],
	\ "html,xml" : ["at", "it"],
	\ }

